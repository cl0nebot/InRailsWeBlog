= signup_form.error_notification

/ Pseudo
.row
  .col.s12.left-align
    = signup_form.input :pseudo, label: t('user.model.pseudo'), required: true, icon: 'account_circle', input_html: { data: { :'parsley-remote' => '/users/validation', :'parsley-remote-reverse' => true, :'parsley-remote-message' => I18n.t('js.user.errors.pseudo.already_taken'), :'parsley-minlength' => CONFIG.user_pseudo_min_length, :'parsley-maxlength' => CONFIG.user_pseudo_max_length, :'parsley-minlength-message' => I18n.t('js.user.errors.pseudo.size', min: CONFIG.user_pseudo_min_length, max: CONFIG.user_pseudo_max_length) } }

/ Email
.row
  .col.s12.left-align
    = signup_form.input :email, label: t('user.model.email'), required: true, icon: 'mail'

/ Password
.row
  .col.s12.left-align
    = signup_form.input :password, label: t('user.model.password'), required: true, icon: 'lock', input_html: { data: { :'parsley-minlength' => CONFIG.user_password_min_length, :'parsley-maxlength' => CONFIG.user_password_max_length, :'parsley-minlength-message' => I18n.t('js.user.errors.password.size', min: CONFIG.user_pseudo_min_length, max: CONFIG.user_pseudo_max_length) } }

/ Confirm password
.row
  .col.s12.left-align
    = signup_form.input :password_confirmation, label: t('views.user.signup.confirm_password'), required: true, icon: 'lock', input_html: { data: { :'parsley-equalto' => '#user_password', :'parsley-equalto-message' => I18n.t('js.user.errors.password.mismatch') } }
