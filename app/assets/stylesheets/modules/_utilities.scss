// Animate when visible
.is-hidden {
  opacity: 0;
}

.is-visible {
  opacity: 1;
}

// Inline element
.inline {
  display: inline;
}

// Hidden textarea for clipboard
.hidden {
  position: absolute;
  left: 0;
  top: 0;
  width: 0;
  height: 0;
  z-index: 100;
  //display: none;
  opacity: 0;
  bottom: 0;
  font-size: 1px;
  color: transparent;
  background: transparent;
  overflow: hidden;
  border: none;
  padding: 0;
  resize: none;
  outline: none;
  user-select: text; /* Because for user-select:none, Safari won't allow input */
}

.adaptative-text {
  font-weight: 300;
  $i: 0;
  @while $i <= $intervals {
    @media only screen and (min-width : 360 + ($i * $interval-size)) {
      font-size: 0.9rem * (1 + (.02 * $i));
    }
    $i: $i + 1;
  }

  // Handle below 360px screen
  @media only screen and (max-width: 360px) {
    font-size: 1.2rem;
  }
}

.adaptative-title {
  font-weight: 400;
  $i: 0;
  @while $i <= $intervals {
    @media only screen and (min-width : 360 + ($i * $interval-size)) {
      font-size: 2.5rem * (1 + (.02 * $i));
    }
    $i: $i + 1;
  }

  // Handle below 360px screen
  @media only screen and (max-width: 360px) {
    font-size: 2rem;
  }
}

@for $i from 1 through 20 {
  .margin-bottom-#{$i*5} {
    clear: both;
    margin-bottom: $i*5px !important;
  }

  .margin-top-#{$i*5} {
    clear: both;
    margin-top: $i*5px !important;
  }
}

@for $i from 1 through 10 {
  @media (max-width: $small-screen) {
    .sm-margin-top-#{$i*10} {
      margin-top: $i*10px !important;
    }

    .sm-margin-bottom-#{$i*10} {
      margin-bottom: $i*10px !important;
    }
  }

  @media (max-width: $medium-screen) {
    .md-margin-top-#{$i*10} {
      margin-top: $i*10px !important;
    }

    .md-margin-bottom-#{$i*10} {
      margin-bottom: $i*10px !important;
    }
  }
}

@media #{$extra-large-and-up} {
  .row .col {
    $i: 1;
    @while $i <= $num-cols {
      $perc: unquote((100 / ($num-cols / $i)) + '%');
      &.xl#{$i} {
        width: $perc;
        margin-left: 0;
      }
      &.offset-xl#{$i} {
        margin-left: $perc;
      }
      &.pull-xl#{$i} {
        right: $perc;
      }
      &.push-xl#{$i} {
        left: $perc;
      }
      $i: $i + 1;
    }
  }
}

.clearfix:before,
.clearfix:after {
  content: '.';
  display: block;
  height: 0;
  overflow: hidden;
}
.clearfix:after { clear: both; }
.clearfix { zoom: 1; } // IE < 8

@media #{$small-and-down} {
  .row .s2-clearfix:nth-child(6n+1) {
    clear: both;
  }
  .row .s3-clearfix:nth-child(4n+1) {
    clear: both;
  }
  .row .s4-clearfix:nth-child(3n+1) {
    clear: both;
  }
  .row .s6-clearfix:nth-child(2n+1) {
    clear: both;
  }
}

@media #{$medium-only} {
  .row .m2-clearfix:nth-child(6n+1) {
    clear: both;
  }
  .row .m3-clearfix:nth-child(4n+1) {
    clear: both;
  }
  .row .m4-clearfix:nth-child(3n+1) {
    clear: both;
  }
  .row .m6-clearfix:nth-child(2n+1) {
    clear: both;
  }
}

@media #{$large-and-up} {
  .row .l2-clearfix:nth-child(6n+1) {
    clear: both;
  }
  .row .l3-clearfix:nth-child(4n+1) {
    clear: both;
  }
  .row .l4-clearfix:nth-child(3n+1) {
    clear: both;
  }
  .row .l6-clearfix:nth-child(2n+1) {
    clear: both;
  }
}

@media #{$extra-large-and-up} {
  .row .xl2-clearfix:nth-child(6n+1) {
    clear: both;
  }
  .row .xl3-clearfix:nth-child(4n+1) {
    clear: both;
  }
  .row .xl4-clearfix:nth-child(3n+1) {
    clear: both;
  }
  .row .xl6-clearfix:nth-child(2n+1) {
    clear: both;
  }
}
